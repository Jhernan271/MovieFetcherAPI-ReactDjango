{"ast":null,"code":"var _jsxFileName = \"/Users/joshuahernandez/MovieInfoApp/movieapp/src/Components/MovieProvider.js\",\n  _s = $RefreshSig$();\n//Parent component to fetch and export the API data to children and handle errors\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieContext = /*#__PURE__*/createContext();\nconst MovieProvider = ({\n  children\n}) => {\n  _s();\n  const [movieData, setMovieData] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    //runs when query state changes as defined by the dependency array\n    const searchMovie = async () => {\n      //creates Promise object\n      setLoading(true);\n      setError(null);\n      setMovieData([]);\n      try {\n        const response = await fetch(`http://www.omdbapi.com/?apikey=72ceb6dc&t=${query}`);\n        const data = await response.json();\n        if (data.Response === 'False') {\n          throw new Error(data.Error); //create error instance, triggers catch block\n        }\n        setMovieData([data]); //updates movie data if successful\n      } catch (err) {\n        //recieves error object type from OMDB\n        setError(err); //stores error message in state\n      } finally {\n        setLoading(false); //loading state set to false irregardless of a success or failure to reset\n      }\n    };\n    if (query) {\n      //searchMovie repeats/runs if a search/query value exists from the user\n      searchMovie();\n    }\n  }, [query]);\n\n  //CONTEXT API\n  //we are returning the OMDB data, loading state, error message, and search status\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: {\n      movieData,\n      loading,\n      error,\n      setQuery\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n//Exporting the fetched movie data to the child component MovieDetails\n_s(MovieProvider, \"IsZ/Ycur1jLV5LXqTCihEINROQI=\");\n_c = MovieProvider;\nexport { MovieContext, MovieProvider };\nvar _c;\n$RefreshReg$(_c, \"MovieProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","MovieContext","MovieProvider","children","_s","movieData","setMovieData","query","setQuery","loading","setLoading","error","setError","searchMovie","response","fetch","data","json","Response","Error","err","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/joshuahernandez/MovieInfoApp/movieapp/src/Components/MovieProvider.js"],"sourcesContent":["//Parent component to fetch and export the API data to children and handle errors\nimport React, { createContext, useState, useEffect } from 'react';\n\nconst MovieContext = createContext();\n\nconst MovieProvider = ({ children }) => {\n  const [movieData, setMovieData] = useState([]);\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => { //runs when query state changes as defined by the dependency array\n    const searchMovie = async () => { //creates Promise object\n      setLoading(true);\n      setError(null);\n      setMovieData([]);\n      try {\n        const response = await fetch(`http://www.omdbapi.com/?apikey=72ceb6dc&t=${query}`);\n        const data = await response.json();\n        if (data.Response === 'False') {\n          throw new Error(data.Error); //create error instance, triggers catch block\n        }\n        setMovieData([data]); //updates movie data if successful\n      } catch (err) { //recieves error object type from OMDB\n        setError(err); //stores error message in state\n      } finally {\n        setLoading(false); //loading state set to false irregardless of a success or failure to reset\n      }\n    };\n\n    if (query) { //searchMovie repeats/runs if a search/query value exists from the user\n      searchMovie();\n    }\n  }, [query]);\n\n  \n  \n  \n  //CONTEXT API\n  //we are returning the OMDB data, loading state, error message, and search status\n  return (\n    <MovieContext.Provider value={{ movieData, loading, error, setQuery }}>\n      {children}\n    </MovieContext.Provider>\n  );\n};\n\n//Exporting the fetched movie data to the child component MovieDetails\nexport { MovieContext, MovieProvider };\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;AAEpC,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IAAE;IAChB,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAY;MAAE;MAChCH,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACdN,YAAY,CAAC,EAAE,CAAC;MAChB,IAAI;QACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6CR,KAAK,EAAE,CAAC;QAClF,MAAMS,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClC,IAAID,IAAI,CAACE,QAAQ,KAAK,OAAO,EAAE;UAC7B,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC;QAC/B;QACAb,YAAY,CAAC,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC,OAAOI,GAAG,EAAE;QAAE;QACdR,QAAQ,CAACQ,GAAG,CAAC,CAAC,CAAC;MACjB,CAAC,SAAS;QACRV,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;IAED,IAAIH,KAAK,EAAE;MAAE;MACXM,WAAW,CAAC,CAAC;IACf;EACF,CAAC,EAAE,CAACN,KAAK,CAAC,CAAC;;EAKX;EACA;EACA,oBACEP,OAAA,CAACC,YAAY,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEjB,SAAS;MAAEI,OAAO;MAAEE,KAAK;MAAEH;IAAS,CAAE;IAAAL,QAAA,EACnEA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;;AAED;AAAAtB,EAAA,CA1CMF,aAAa;AAAAyB,EAAA,GAAbzB,aAAa;AA2CnB,SAASD,YAAY,EAAEC,aAAa;AAAG,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}